# Магазин, заготовка
# Напишите заготовку для небольшого магазинчика, который торгует фильмами и книгами.

# Создайте класс продукта, у экземпляров которого есть два поля: цена и количество на складе.
# При создании нового продукта можно передать значения цены и остатка. Для этих переменных сделайте геттеры.

# Унаследуйте от этого класса два других: книгу и фильм соответственно. Своих переменных у этих классов пока нет.

# Создайте в основной программе какой-нибудь продукт, например «фильм Леон». Выведите его стоимость в консоль.

# Фильм Леон стоит 290 руб.
# Создайте для этой программы локальный репозиторий. Мы к ней ещё вернёмся.

# Магазин с витриной и конструкторами
# Продолжаем развивать наш «Магазин», который мы создали в уроке про наследование классов.

# Сделайте так, чтобы из основной программы можно было создать объект класса Book или Film,
# передав ему кроме цены также другие параметры.
# Для книги — название, жанр и автора; для фильма — название, год и режиссера.

# Напишите также метод to_s для экземпляра класса Film и Book, который возвращает информацию об этом экземпляре одной строкой.

# В основной программе создайте пару книжек и фильмов и выведите их в цикле на экран.

# Например:

# Вот какие товары у нас есть:

# Фильм «Леон», 1994, реж. Люк Бессон, 990 руб. (осталось 5)
# Фильм «Дурак», 2014, реж. Юрий Быков, 390 руб. (осталось 1)
# Книга «Идиот», роман, автор — Федор Достоевский, 1500 руб. (осталось 10)

# Магазин с сеттерами и update
# Продолжаем развивать наш «Магазин»: допишите важные методы для изменения экземпляров классов Book и Film.

# Сделайте так, чтобы у любого продукта можно было поменять внутреннюю переменную экземпляра, например, вот так:

# product = Film.new(title: 'Леон', director: 'Люк Бессон', price: 990)

# product.year = 1994
# product.amount = 5
# или так:

# product.update(year: 1994, amount: 5)

# Магазин с чтением из файлов
# Продолжаем развивать наш «Магазин»: реализуйте функционал считывания продуктов из папки data.
# Пусть в папке, например, data/films лежат текстовые файлы в формате, который вам уже знаком (добавляется цена и остаток на складе):

# Название фильма
# Фамилия и имя режиссера
# Год выхода
# Цена
# Остаток
# А в папке data/books — файлы в таком формате:

# Название книги
# Жанр
# Фамилия и имя автора
# Цена
# Остаток
# Напишите для каждого класса-ребенка метод класса (статический метод) from_file,
# который создает новый экземпляр класса, заполняя его данными из файла, чтобы можно было написать вот так:

# film = Film.from_file('./data/films/01.txt')
# book = Book.from_file('./data/books/01.txt')
# Сделайте также, чтобы метод родителя возвращал ошибку NotImplementedError, на случай,
# если какой-то ребенок попытается создать себя используя статический метод родителя.

require_relative 'Item'
require_relative 'Movie'
require_relative 'Book'

leon = Movie.new(price: 5, stock: 1, title: 'Leon', director: 'Luke Besson', release_date: 1994)

b = Book.new(price: 5, stock: 10, title: "Harry Potter", genre: "adventure", author: "J.K. Rowling")

m = Movie.from_file('/data/movies/movie_1.txt')
b = Book.from_file('/data/books/book.txt')

puts b.title

